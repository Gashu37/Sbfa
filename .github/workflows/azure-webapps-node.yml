# Key Sections of the Workflow
on: push: branches: [ "main" ]: The workflow is triggered automatically when a new code commit is pushed to the main branch. This ensures that every approved change is immediately deployed, reducing time from development to production.

jobs: build-and-deploy-node-app: This is the main job that handles the entire process.

runs-on: ubuntu-latest: The job runs on a fresh Ubuntu virtual machine, which is a common and reliable environment for Node.js applications.

steps: The sequence of tasks within the job.

actions/checkout@v4: Checks out the latest code from your repository. This is a standard first step in almost all workflows.

actions/setup-node@v4: Configures the Node.js runtime environment on the runner, ensuring the correct version is used to build the application.

run: npm install: Installs all the necessary project dependencies.

run: npm run build: Runs the build command specified in your package.json file. This creates the production-ready version of your application.This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
uses: azure/webapps-deploy@v2: This is the core action for deployment. It uses the credentials you've stored in GitHub Secrets to securely log into Azure and transfer your application files. It handles all the underlying complexities of the deployment process.

with: app-name: 'Your-App-Name': You need to provide the name of your specific web app in Azure.

with: publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}: This securely references the Publish Profile secret you created in GitHub, which contains the credentials needed to access your Azure App Service.
Configuring the Workflow
To use this template, you must first set up a web app in your Azure account. You'll then download the Publish Profile for that web app from the Azure portal. This file contains the necessary deployment credentials. Finally, you'll create a new GitHub repository secret (e.g., AZURE_WEBAPP_PUBLISH_PROFILE) and paste the contents of that profile into its value.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '20.x'                # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
